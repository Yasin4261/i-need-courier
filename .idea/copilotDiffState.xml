<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.dockerignore" />
              <option name="updatedContent" value="target/&#10;!target/*.jar&#10;.mvn/wrapper/maven-wrapper.jar&#10;.git&#10;.gitignore&#10;README.md&#10;Dockerfile&#10;.dockerignore" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/API.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/API.md" />
              <option name="updatedContent" value="# API Documentation&#10;&#10;## Authentication&#10;&#10;All API endpoints require authentication. Use the following credentials:&#10;&#10;- **Username**: admin&#10;- **Password**: admin123&#10;&#10;## Base URL&#10;&#10;```&#10;http://localhost:8080/api&#10;```&#10;&#10;## Courier Endpoints&#10;&#10;### Get All Couriers&#10;```http&#10;GET /api/couriers&#10;```&#10;&#10;**Response:**&#10;```json&#10;[&#10;  {&#10;    &quot;id&quot;: 1,&#10;    &quot;name&quot;: &quot;Ali Özkan&quot;,&#10;    &quot;email&quot;: &quot;ali.ozkan@courier.com&quot;,&#10;    &quot;phone&quot;: &quot;+905551111111&quot;,&#10;    &quot;vehicleType&quot;: &quot;MOTORCYCLE&quot;,&#10;    &quot;workType&quot;: &quot;SHIFT&quot;,&#10;    &quot;isAvailable&quot;: true,&#10;    &quot;status&quot;: &quot;ONLINE&quot;&#10;  }&#10;]&#10;```&#10;&#10;### Get Courier by ID&#10;```http&#10;GET /api/couriers/{id}&#10;```&#10;&#10;### Create New Courier&#10;```http&#10;POST /api/couriers&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;name&quot;: &quot;John Doe&quot;,&#10;  &quot;email&quot;: &quot;john.doe@courier.com&quot;,&#10;  &quot;phone&quot;: &quot;+905551234567&quot;,&#10;  &quot;vehicleType&quot;: &quot;MOTORCYCLE&quot;,&#10;  &quot;workType&quot;: &quot;SHIFT&quot;,&#10;  &quot;isAvailable&quot;: true&#10;}&#10;```&#10;&#10;### Update Courier&#10;```http&#10;PUT /api/couriers/{id}&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;name&quot;: &quot;John Doe Updated&quot;,&#10;  &quot;email&quot;: &quot;john.doe@courier.com&quot;,&#10;  &quot;phone&quot;: &quot;+905551234567&quot;,&#10;  &quot;isAvailable&quot;: false&#10;}&#10;```&#10;&#10;### Delete Courier&#10;```http&#10;DELETE /api/couriers/{id}&#10;```&#10;&#10;### Get Available Couriers&#10;```http&#10;GET /api/couriers/available&#10;```&#10;&#10;### Search Couriers&#10;```http&#10;GET /api/couriers/search?name=Ali&#10;```&#10;&#10;## Error Responses&#10;&#10;### Validation Error (400)&#10;```json&#10;{&#10;  &quot;timestamp&quot;: &quot;2025-08-04T12:00:00&quot;,&#10;  &quot;status&quot;: 400,&#10;  &quot;error&quot;: &quot;Validation Failed&quot;,&#10;  &quot;errors&quot;: {&#10;    &quot;name&quot;: &quot;Name is required&quot;,&#10;    &quot;email&quot;: &quot;Email should be valid&quot;&#10;  }&#10;}&#10;```&#10;&#10;### Not Found (404)&#10;```json&#10;{&#10;  &quot;timestamp&quot;: &quot;2025-08-04T12:00:00&quot;,&#10;  &quot;status&quot;: 404,&#10;  &quot;error&quot;: &quot;Courier not found&quot;,&#10;  &quot;message&quot;: &quot;Courier with id 999 not found&quot;&#10;}&#10;```&#10;&#10;### Internal Server Error (500)&#10;```json&#10;{&#10;  &quot;timestamp&quot;: &quot;2025-08-04T12:00:00&quot;,&#10;  &quot;status&quot;: 500,&#10;  &quot;error&quot;: &quot;Internal Server Error&quot;,&#10;  &quot;message&quot;: &quot;An unexpected error occurred&quot;&#10;}&#10;```&#10;&#10;## Health Check Endpoints&#10;&#10;### Application Health&#10;```http&#10;GET /actuator/health&#10;```&#10;&#10;**Response:**&#10;```json&#10;{&#10;  &quot;status&quot;: &quot;UP&quot;,&#10;  &quot;components&quot;: {&#10;    &quot;db&quot;: {&#10;      &quot;status&quot;: &quot;UP&quot;,&#10;      &quot;details&quot;: {&#10;        &quot;database&quot;: &quot;MySQL&quot;,&#10;        &quot;validationQuery&quot;: &quot;isValid()&quot;&#10;      }&#10;    },&#10;    &quot;redis&quot;: {&#10;      &quot;status&quot;: &quot;UP&quot;&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;### Application Info&#10;```http&#10;GET /actuator/info&#10;```&#10;&#10;### Application Metrics&#10;```http&#10;GET /actuator/metrics&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DATABASE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DATABASE.md" />
              <option name="updatedContent" value="# Database Schema Documentation&#10;&#10;## Overview&#10;&#10;The I Need Courier system uses a MySQL database with the following core entities designed for B2B courier operations.&#10;&#10;## Entity Relationship Diagram&#10;&#10;```&#10;SystemUser (1) ←→ (1) Coordinator (1) ←→ (N) Courier&#10;                         ↓                    ↓&#10;Business (1) ←→ (N) Order ←→ (1) Courier ←→ (1) Vehicle&#10;                    ↓&#10;              OrderTracking (N)&#10;```&#10;&#10;## Tables&#10;&#10;### system_users&#10;System users including admins, coordinators, and couriers.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| username | VARCHAR(50) | UNIQUE, NOT NULL | Login username |&#10;| email | VARCHAR(100) | UNIQUE, NOT NULL | Email address |&#10;| password | VARCHAR(255) | NOT NULL | Encrypted password |&#10;| first_name | VARCHAR(50) | | First name |&#10;| last_name | VARCHAR(50) | | Last name |&#10;| phone | VARCHAR(20) | | Phone number |&#10;| role | ENUM | NOT NULL | ADMIN, COORDINATOR, COURIER |&#10;| is_active | BOOLEAN | DEFAULT TRUE | Account status |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Creation time |&#10;| updated_at | DATETIME | DEFAULT CURRENT_TIMESTAMP ON UPDATE | Last update time |&#10;&#10;**Indexes:**&#10;- `idx_email (email)`&#10;- `idx_username (username)`&#10;- `idx_role (role)`&#10;- `idx_is_active (is_active)`&#10;&#10;### businesses&#10;Companies that place delivery orders.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| business_code | VARCHAR(50) | UNIQUE, NOT NULL | Business code |&#10;| name | VARCHAR(200) | NOT NULL | Business name |&#10;| contact_person | VARCHAR(100) | | Contact person name |&#10;| phone | VARCHAR(20) | NOT NULL | Phone number |&#10;| email | VARCHAR(100) | | Email address |&#10;| address | VARCHAR(500) | NOT NULL | Business address |&#10;| address_description | TEXT | | Detailed address description |&#10;| latitude | DECIMAL(10,8) | | GPS latitude |&#10;| longitude | DECIMAL(11,8) | | GPS longitude |&#10;| location_name | VARCHAR(200) | | Location name |&#10;| business_type | VARCHAR(100) | | Type of business |&#10;| payment_terms | ENUM | DEFAULT 'POSTPAID' | PREPAID, POSTPAID, CASH_ON_DELIVERY |&#10;| credit_limit | DECIMAL(10,2) | DEFAULT 0.00 | Credit limit |&#10;| is_active | BOOLEAN | DEFAULT TRUE | Business status |&#10;| notes | TEXT | | Additional notes |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Creation time |&#10;| updated_at | DATETIME | DEFAULT CURRENT_TIMESTAMP ON UPDATE | Last update time |&#10;&#10;**Indexes:**&#10;- `idx_business_code (business_code)`&#10;- `idx_name (name)`&#10;- `idx_phone (phone)`&#10;- `idx_business_type (business_type)`&#10;- `idx_is_active (is_active)`&#10;- `idx_location (latitude, longitude)`&#10;&#10;### coordinators&#10;Field coordinators who manage courier teams.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| system_user_id | BIGINT | UNIQUE, FK → system_users.id | Associated system user |&#10;| name | VARCHAR(100) | NOT NULL | Coordinator name |&#10;| email | VARCHAR(100) | UNIQUE, NOT NULL | Email address |&#10;| phone | VARCHAR(20) | NOT NULL | Phone number |&#10;| employee_id | VARCHAR(50) | UNIQUE | Employee identifier |&#10;| work_type | ENUM | DEFAULT 'SHIFT' | JOKER, SHIFT |&#10;| shift_start | TIME | | Shift start time |&#10;| shift_end | TIME | | Shift end time |&#10;| is_active | BOOLEAN | DEFAULT TRUE | Active status |&#10;| status | ENUM | DEFAULT 'OFFLINE' | ONLINE, OFFLINE, BUSY, ON_BREAK, IN_FIELD |&#10;| current_latitude | DECIMAL(10,8) | | Current GPS latitude |&#10;| current_longitude | DECIMAL(11,8) | | Current GPS longitude |&#10;| coverage_area | VARCHAR(500) | | Responsible coverage area |&#10;| max_courier_count | INT | DEFAULT 10 | Maximum couriers managed |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Creation time |&#10;| updated_at | DATETIME | DEFAULT CURRENT_TIMESTAMP ON UPDATE | Last update time |&#10;&#10;### couriers&#10;Delivery personnel who execute orders.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| system_user_id | BIGINT | UNIQUE, FK → system_users.id | Associated system user |&#10;| name | VARCHAR(100) | NOT NULL | Courier name |&#10;| email | VARCHAR(100) | UNIQUE, NOT NULL | Email address |&#10;| phone | VARCHAR(20) | NOT NULL | Phone number |&#10;| license_number | VARCHAR(50) | | Driving license number |&#10;| vehicle_type | ENUM | | BICYCLE, MOTORCYCLE, CAR, VAN, TRUCK, WALKING |&#10;| work_type | ENUM | DEFAULT 'SHIFT' | JOKER, SHIFT |&#10;| shift_start | TIME | | Shift start time |&#10;| shift_end | TIME | | Shift end time |&#10;| is_available | BOOLEAN | DEFAULT TRUE | Availability status |&#10;| status | ENUM | DEFAULT 'OFFLINE' | ONLINE, OFFLINE, BUSY, ON_BREAK, IN_DELIVERY |&#10;| current_latitude | DECIMAL(10,8) | | Current GPS latitude |&#10;| current_longitude | DECIMAL(11,8) | | Current GPS longitude |&#10;| current_location_name | VARCHAR(200) | | Current location name |&#10;| total_deliveries | INT | DEFAULT 0 | Total completed deliveries |&#10;| vehicle_id | BIGINT | FK → vehicles.id | Assigned vehicle |&#10;| coordinator_id | BIGINT | FK → coordinators.id | Assigned coordinator |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Creation time |&#10;| updated_at | DATETIME | DEFAULT CURRENT_TIMESTAMP ON UPDATE | Last update time |&#10;&#10;### orders&#10;Delivery orders from businesses to end customers.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| order_number | VARCHAR(50) | UNIQUE, NOT NULL | Order reference number |&#10;| status | ENUM | DEFAULT 'PENDING' | PENDING, ASSIGNED, PICKED_UP, IN_TRANSIT, DELIVERED, CANCELLED |&#10;| priority | ENUM | DEFAULT 'NORMAL' | LOW, NORMAL, HIGH, URGENT |&#10;| business_id | BIGINT | NOT NULL, FK → businesses.id | Ordering business |&#10;| courier_id | BIGINT | FK → couriers.id | Assigned courier |&#10;| coordinator_id | BIGINT | FK → coordinators.id | Supervising coordinator |&#10;| end_customer_name | VARCHAR(100) | NOT NULL | Final recipient name |&#10;| end_customer_phone | VARCHAR(20) | | Final recipient phone |&#10;| pickup_address | TEXT | NOT NULL | Pickup location |&#10;| pickup_address_description | TEXT | | Detailed pickup instructions |&#10;| delivery_address | TEXT | NOT NULL | Delivery location |&#10;| delivery_address_description | TEXT | | Detailed delivery instructions |&#10;| package_description | VARCHAR(500) | NOT NULL | Package contents |&#10;| package_weight | DECIMAL(8,2) | | Package weight (kg) |&#10;| package_count | INT | DEFAULT 1 | Number of packages |&#10;| package_value | DECIMAL(10,2) | | Package value for insurance |&#10;| payment_type | ENUM | DEFAULT 'BUSINESS_ACCOUNT' | CASH, CARD, ONLINE, BUSINESS_ACCOUNT |&#10;| delivery_fee | DECIMAL(10,2) | NOT NULL | Delivery charge |&#10;| collection_amount | DECIMAL(10,2) | DEFAULT 0.00 | Amount to collect |&#10;| courier_notes | TEXT | | Instructions for courier |&#10;| business_notes | TEXT | | Notes from business |&#10;| receipt_image_url | VARCHAR(500) | | Receipt/invoice image |&#10;| delivery_proof_url | VARCHAR(500) | | Delivery confirmation image |&#10;| order_date | DATETIME | DEFAULT CURRENT_TIMESTAMP | Order creation date |&#10;| scheduled_pickup_time | DATETIME | | Planned pickup time |&#10;| actual_pickup_time | DATETIME | | Actual pickup time |&#10;| estimated_delivery_time | DATETIME | | Estimated delivery time |&#10;| actual_delivery_time | DATETIME | | Actual delivery time |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Creation time |&#10;| updated_at | DATETIME | DEFAULT CURRENT_TIMESTAMP ON UPDATE | Last update time |&#10;&#10;### vehicles&#10;Courier vehicles and equipment.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| plate_number | VARCHAR(20) | UNIQUE, NOT NULL | License plate |&#10;| vehicle_type | ENUM | NOT NULL | BICYCLE, MOTORCYCLE, CAR, VAN, TRUCK, WALKING |&#10;| brand | VARCHAR(50) | | Vehicle brand |&#10;| model | VARCHAR(50) | | Vehicle model |&#10;| year | INT | | Manufacturing year |&#10;| color | VARCHAR(30) | | Vehicle color |&#10;| max_weight_capacity | DECIMAL(8,2) | | Maximum load capacity (kg) |&#10;| is_active | BOOLEAN | DEFAULT TRUE | Vehicle status |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Creation time |&#10;| updated_at | DATETIME | DEFAULT CURRENT_TIMESTAMP ON UPDATE | Last update time |&#10;&#10;### order_tracking&#10;Order status change history and tracking.&#10;&#10;| Column | Type | Constraints | Description |&#10;|--------|------|-------------|-------------|&#10;| id | BIGINT | PRIMARY KEY, AUTO_INCREMENT | Unique identifier |&#10;| order_id | BIGINT | NOT NULL, FK → orders.id | Associated order |&#10;| status | ENUM | NOT NULL | Order status at this point |&#10;| description | VARCHAR(500) | | Status change description |&#10;| location | VARCHAR(200) | | Location name |&#10;| latitude | DECIMAL(10,8) | | GPS latitude |&#10;| longitude | DECIMAL(11,8) | | GPS longitude |&#10;| created_at | DATETIME | DEFAULT CURRENT_TIMESTAMP | Timestamp |&#10;| created_by | VARCHAR(100) | | Person who made the change |&#10;| created_by_type | ENUM | DEFAULT 'SYSTEM' | SYSTEM, COURIER, COORDINATOR, ADMIN |&#10;&#10;## Relationships&#10;&#10;- **system_users** → **coordinators** (1:1)&#10;- **system_users** → **couriers** (1:1)&#10;- **coordinators** → **couriers** (1:N)&#10;- **businesses** → **orders** (1:N)&#10;- **couriers** → **orders** (1:N)&#10;- **vehicles** → **couriers** (1:1)&#10;- **orders** → **order_tracking** (1:N)&#10;&#10;## Indexes and Performance&#10;&#10;### Query Optimization&#10;- **Location-based queries**: Spatial indexes on latitude/longitude columns&#10;- **Status filtering**: Indexes on status and priority columns&#10;- **Time-based queries**: Indexes on timestamp columns&#10;- **Search functionality**: Indexes on name and email columns&#10;&#10;### Performance Considerations&#10;- **Partitioning**: Consider partitioning orders table by date for large datasets&#10;- **Archiving**: Move old orders to archive tables&#10;- **Caching**: Use Redis for frequently accessed data like active orders and courier locations" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DEPLOYMENT.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DEPLOYMENT.md" />
              <option name="updatedContent" value="# Deployment Guide&#10;&#10;## Prerequisites&#10;&#10;- Docker 20.10+&#10;- Docker Compose 2.0+&#10;- Git&#10;&#10;## Quick Start&#10;&#10;### 1. Clone Repository&#10;```bash&#10;git clone https://github.com/Yasin4261/i-need-courier.git&#10;cd i-need-courier&#10;```&#10;&#10;### 2. Environment Setup&#10;The application uses Docker Compose with predefined environment variables. No additional configuration is required for development.&#10;&#10;### 3. Start Services&#10;```bash&#10;# Build and start all services&#10;docker-compose up --build -d&#10;&#10;# Check service status&#10;docker-compose ps&#10;&#10;# View logs&#10;docker-compose logs -f web-app&#10;```&#10;&#10;### 4. Access Application&#10;- **Web Interface**: http://localhost&#10;- **API**: http://localhost:8080&#10;- **Health Check**: http://localhost/health&#10;&#10;## Service Architecture&#10;&#10;```mermaid&#10;graph TB&#10;    A[Nginx :80] --&gt; B[Spring Boot :8080]&#10;    B --&gt; C[MySQL :3306]&#10;    B --&gt; D[Redis :6379]&#10;    B --&gt; E[Kafka :9092]&#10;    E --&gt; F[Zookeeper :2181]&#10;```&#10;&#10;## Environment Configuration&#10;&#10;### Development&#10;```yaml&#10;# docker-compose.yml&#10;services:&#10;  web-app:&#10;    environment:&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/courier_db&#10;      SPRING_REDIS_HOST: redis&#10;      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092&#10;```&#10;&#10;### Production Recommendations&#10;&#10;1. **Security**&#10;   - Change default passwords&#10;   - Use environment-specific secrets&#10;   - Enable SSL/TLS&#10;&#10;2. **Database**&#10;   - Use external managed MySQL instance&#10;   - Configure backup strategies&#10;   - Optimize connection pooling&#10;&#10;3. **Caching**&#10;   - Use Redis cluster for high availability&#10;   - Configure appropriate memory limits&#10;&#10;4. **Monitoring**&#10;   - Enable application metrics&#10;   - Configure log aggregation&#10;   - Set up health check monitoring&#10;&#10;## Scaling Considerations&#10;&#10;### Horizontal Scaling&#10;```yaml&#10;services:&#10;  web-app:&#10;    deploy:&#10;      replicas: 3&#10;    depends_on:&#10;      - mysql&#10;      - redis&#10;```&#10;&#10;### Load Balancing&#10;Nginx is configured to handle load balancing across multiple application instances.&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;&#10;**Database Connection Failed**&#10;```bash&#10;# Check MySQL container&#10;docker-compose logs mysql&#10;&#10;# Verify database credentials&#10;docker-compose exec mysql mysql -u courier_user -p courier_db&#10;```&#10;&#10;**Application Won't Start**&#10;```bash&#10;# Check application logs&#10;docker-compose logs web-app&#10;&#10;# Restart specific service&#10;docker-compose restart web-app&#10;```&#10;&#10;**Port Conflicts**&#10;```bash&#10;# Check port usage&#10;netstat -tulpn | grep :80&#10;&#10;# Stop conflicting services&#10;sudo service apache2 stop&#10;```&#10;&#10;### Health Checks&#10;&#10;```bash&#10;# Application health&#10;curl http://localhost/health&#10;&#10;# Database connectivity&#10;curl http://localhost:8080/actuator/health&#10;&#10;# Service status&#10;docker-compose ps&#10;```&#10;&#10;## Backup &amp; Recovery&#10;&#10;### Database Backup&#10;```bash&#10;# Create backup&#10;docker-compose exec mysql mysqldump -u courier_user -p courier_db &gt; backup.sql&#10;&#10;# Restore backup&#10;docker-compose exec -i mysql mysql -u courier_user -p courier_db &lt; backup.sql&#10;```&#10;&#10;### Volume Backup&#10;```bash&#10;# Backup volumes&#10;docker run --rm -v courier_mysql_data:/data -v $(pwd):/backup alpine tar czf /backup/mysql_backup.tar.gz /data&#10;```&#10;&#10;## Monitoring&#10;&#10;### Application Metrics&#10;- `/actuator/health` - Health status&#10;- `/actuator/metrics` - Performance metrics&#10;- `/actuator/info` - Application information&#10;&#10;### Container Monitoring&#10;```bash&#10;# Resource usage&#10;docker stats&#10;&#10;# Container logs&#10;docker-compose logs -f [service-name]&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="# Multi-stage build for Spring Boot application&#10;FROM openjdk:21-jdk-slim AS builder&#10;&#10;WORKDIR /app&#10;COPY mvnw .&#10;COPY .mvn .mvn&#10;COPY pom.xml .&#10;COPY src src&#10;&#10;# Make mvnw executable&#10;RUN chmod +x ./mvnw&#10;&#10;# Build the application&#10;RUN ./mvnw clean package -DskipTests&#10;&#10;# Runtime stage&#10;FROM openjdk:21-jre-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the built JAR from builder stage&#10;COPY --from=builder /app/target/*.jar app.jar&#10;&#10;# Create non-root user&#10;RUN addgroup --system spring &amp;&amp; adduser --system spring --ingroup spring&#10;USER spring:spring&#10;&#10;EXPOSE 8080&#10;&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]&#10;" />
              <option name="updatedContent" value="# Multi-stage build for Spring Boot application&#10;FROM eclipse-temurin:21-jdk-alpine AS builder&#10;&#10;WORKDIR /app&#10;COPY mvnw .&#10;COPY .mvn .mvn&#10;COPY pom.xml .&#10;COPY src src&#10;&#10;# Make mvnw executable&#10;RUN chmod +x ./mvnw&#10;&#10;# Build the application&#10;RUN ./mvnw clean package -DskipTests&#10;&#10;# Runtime stage&#10;FROM eclipse-temurin:21-jre-alpine&#10;&#10;WORKDIR /app&#10;&#10;# Copy the built JAR from builder stage&#10;COPY --from=builder /app/target/*.jar app.jar&#10;&#10;# Create non-root user&#10;RUN addgroup -S spring &amp;&amp; adduser -S spring -G spring&#10;USER spring:spring&#10;&#10;EXPOSE 8080&#10;&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LICENSE">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LICENSE" />
              <option name="updatedContent" value="MIT License&#10;&#10;Copyright (c) 2025 Yasin Güneş&#10;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;in the Software without restriction, including without limitation the rights&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;copies of the Software, and to permit persons to whom the Software is&#10;furnished to do so, subject to the following conditions:&#10;&#10;The above copyright notice and this permission notice shall be included in all&#10;copies or substantial portions of the Software.&#10;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#10;SOFTWARE." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# I Need Courier - B2B Courier Management System&#10;&#10;A comprehensive B2B courier management system built with Spring Boot, designed for businesses to manage courier operations efficiently.&#10;&#10;##  Features&#10;&#10;- **Business Management**: Register and manage businesses that place orders&#10;- **Courier Management**: Manage courier staff with shift scheduling and vehicle assignment&#10;- **Coordinator System**: Field coordinators supervise couriers and assign orders&#10;- **Order Tracking**: Real-time order tracking with GPS coordinates&#10;- **Vehicle Management**: Assign and track courier vehicles&#10;- **Flexible Work Types**: Support for both shift-based and flexible (joker) work schedules&#10;- **Payment System**: Multiple payment types including business accounts and cash collection&#10;&#10;## ️ Architecture&#10;&#10;### Tech Stack&#10;- **Backend**: Spring Boot 3.5.4 with Java 21&#10;- **Database**: MySQL 8.0 with Flyway migrations&#10;- **Cache**: Redis for session management&#10;- **Message Queue**: Apache Kafka&#10;- **Security**: Spring Security&#10;- **Containerization**: Docker &amp; Docker Compose&#10;- **Reverse Proxy**: Nginx&#10;&#10;### System Design&#10;The system follows a B2B model where:&#10;1. **Businesses** place orders in the system&#10;2. **Coordinators** assign orders to available couriers&#10;3. **Couriers** pick up packages from businesses and deliver to end customers&#10;4. **Real-time tracking** throughout the delivery process&#10;&#10;## ️ Database Schema&#10;&#10;### Core Entities&#10;&#10;#### System Users&#10;- Admins, Coordinators, and Couriers with role-based access&#10;- Secure authentication and authorization&#10;&#10;#### Businesses&#10;- Companies that place delivery orders&#10;- Contact information and address details&#10;- Payment terms and credit limits&#10;&#10;#### Orders&#10;- Complete order lifecycle management&#10;- Pickup and delivery addresses with detailed descriptions&#10;- Package information including weight and value&#10;- Payment and collection details&#10;&#10;#### Couriers&#10;- Personal and professional information&#10;- Shift scheduling (fixed shifts or flexible hours)&#10;- Vehicle assignments and current location&#10;- Performance tracking&#10;&#10;#### Coordinators&#10;- Field supervisors managing courier teams&#10;- Coverage area assignments&#10;- Capacity management&#10;&#10;##  Deployment&#10;&#10;### Using Docker Compose&#10;&#10;1. **Clone the repository**&#10;```bash&#10;git clone https://github.com/Yasin4261/i-need-courier.git&#10;cd i-need-courier&#10;```&#10;&#10;2. **Start all services**&#10;```bash&#10;docker-compose up --build -d&#10;```&#10;&#10;3. **Access the application**&#10;- Main Application: http://localhost&#10;- Direct API: http://localhost:8080&#10;- Health Check: http://localhost/health&#10;&#10;### Services Overview&#10;&#10;| Service | Port | Description |&#10;|---------|------|-------------|&#10;| Nginx | 80 | Reverse proxy and load balancer |&#10;| Spring Boot App | 8080 | Main application server |&#10;| MySQL | 3306 | Primary database |&#10;| Redis | 6379 | Session store and cache |&#10;| Kafka | 9092 | Message broker |&#10;&#10;##  Authentication&#10;&#10;### Default Login&#10;- **Username**: admin&#10;- **Password**: admin123&#10;&#10;### User Roles&#10;- **ADMIN**: Full system access&#10;- **COORDINATOR**: Manage couriers and assign orders&#10;- **COURIER**: View assigned orders and update status&#10;&#10;##  Sample Data&#10;&#10;The system comes with pre-loaded sample data:&#10;- 1 System Admin&#10;- 2 Coordinators (different shifts and coverage areas)&#10;- 3 Couriers with various vehicle types&#10;- 5 Businesses (restaurants, pharmacies, markets)&#10;- Sample orders in different states&#10;&#10;## ️ Development&#10;&#10;### Prerequisites&#10;- Java 21+&#10;- Maven 3.6+&#10;- Docker &amp; Docker Compose&#10;&#10;### Local Development Setup&#10;&#10;1. **Database Setup**&#10;```bash&#10;# Using Docker&#10;docker run -d --name courier-mysql \&#10;  -e MYSQL_ROOT_PASSWORD=root_password \&#10;  -e MYSQL_DATABASE=courier_db \&#10;  -e MYSQL_USER=courier_user \&#10;  -e MYSQL_PASSWORD=courier_password \&#10;  -p 3306:3306 mysql:8.0&#10;```&#10;&#10;2. **Redis Setup**&#10;```bash&#10;docker run -d --name courier-redis -p 6379:6379 redis:7-alpine&#10;```&#10;&#10;3. **Run Application**&#10;```bash&#10;./mvnw spring-boot:run&#10;```&#10;&#10;### Database Migrations&#10;&#10;The project uses Flyway for database migrations:&#10;- `V1__Create_initial_tables.sql`: Creates all database tables&#10;- `V2__Insert_initial_data.sql`: Loads sample data&#10;&#10;Migrations run automatically on application startup.&#10;&#10;##  API Endpoints&#10;&#10;### Courier Management&#10;- `GET /api/couriers` - List all couriers&#10;- `GET /api/couriers/{id}` - Get courier details&#10;- `POST /api/couriers` - Create new courier&#10;- `PUT /api/couriers/{id}` - Update courier&#10;- `DELETE /api/couriers/{id}` - Delete courier&#10;- `GET /api/couriers/available` - Get available couriers&#10;- `GET /api/couriers/search?name={name}` - Search couriers&#10;&#10;### Health Monitoring&#10;- `GET /actuator/health` - Application health status&#10;- `GET /actuator/info` - Application information&#10;- `GET /actuator/metrics` - Application metrics&#10;&#10;##  Business Flow&#10;&#10;### Order Lifecycle&#10;1. **Order Creation**: Business places an order in the system&#10;2. **Coordinator Assignment**: Order assigned to area coordinator&#10;3. **Courier Assignment**: Coordinator assigns order to available courier&#10;4. **Pickup**: Courier picks up package from business&#10;5. **In Transit**: Package being delivered to end customer&#10;6. **Delivery**: Package delivered and confirmed&#10;7. **Tracking**: Complete audit trail maintained&#10;&#10;### Work Schedule Types&#10;- **Shift Workers**: Fixed working hours with specific start/end times&#10;- **Joker Workers**: Flexible schedule, available as needed&#10;&#10;##  Error Handling&#10;&#10;The system includes comprehensive error handling:&#10;- Global exception handler for API errors&#10;- Validation errors with detailed field-level messages&#10;- Database constraint violations&#10;- Authentication and authorization errors&#10;&#10;##  Monitoring &amp; Observability&#10;&#10;- **Health Checks**: Built-in health monitoring&#10;- **Metrics**: Application performance metrics&#10;- **Logging**: Comprehensive logging throughout the application&#10;- **Database Monitoring**: Connection pool and query performance&#10;&#10;##  Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add some amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;## ‍♂️ Support&#10;&#10;For support and questions:&#10;- Create an issue in the GitHub repository&#10;- Check the existing documentation&#10;- Review the API endpoints and sample data&#10;&#10;##  Future Enhancements&#10;&#10;- [ ] Mobile application for couriers&#10;- [ ] Advanced analytics and reporting&#10;- [ ] Integration with mapping services&#10;- [ ] Automated dispatch algorithms&#10;- [ ] Customer notification system&#10;- [ ] Performance analytics dashboard" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/compose.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/compose.yaml" />
              <option name="originalContent" value="services:&#10;  mysql:&#10;    image: 'mysql:latest'&#10;    environment:&#10;      - 'MYSQL_DATABASE=mydatabase'&#10;      - 'MYSQL_PASSWORD=secret'&#10;      - 'MYSQL_ROOT_PASSWORD=verysecret'&#10;      - 'MYSQL_USER=myuser'&#10;    ports:&#10;      - '3306'&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  # MySQL Database&#10;  mysql:&#10;    image: mysql:8.0&#10;    container_name: courier-mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root_password&#10;      MYSQL_DATABASE: courier_db&#10;      MYSQL_USER: courier_user&#10;      MYSQL_PASSWORD: courier_password&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;]&#10;      timeout: 20s&#10;      retries: 10&#10;    networks:&#10;      - courier-network&#10;&#10;  # Redis Cache&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: courier-redis&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;redis-cli&quot;, &quot;ping&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;    networks:&#10;      - courier-network&#10;&#10;  # Kafka and Zookeeper&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:latest&#10;    container_name: courier-zookeeper&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_TICK_TIME: 2000&#10;    networks:&#10;      - courier-network&#10;&#10;  kafka:&#10;    image: confluentinc/cp-kafka:latest&#10;    container_name: courier-kafka&#10;    depends_on:&#10;      - zookeeper&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;    networks:&#10;      - courier-network&#10;&#10;  # Spring Boot Application&#10;  web-app:&#10;    build: .&#10;    container_name: courier-app&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;      redis:&#10;        condition: service_healthy&#10;      kafka:&#10;        condition: service_started&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      SPRING_PROFILES_ACTIVE: docker&#10;    networks:&#10;      - courier-network&#10;    restart: unless-stopped&#10;&#10;  # NGINX Reverse Proxy&#10;  nginx:&#10;    image: nginx:alpine&#10;    container_name: courier-nginx&#10;    depends_on:&#10;      - web-app&#10;    ports:&#10;      - &quot;80:80&quot;&#10;    volumes:&#10;      - ./nginx.conf:/etc/nginx/conf.d/default.conf&#10;    networks:&#10;      - courier-network&#10;    restart: unless-stopped&#10;&#10;volumes:&#10;  mysql_data:&#10;  redis_data:&#10;&#10;networks:&#10;  courier-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/nginx.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/nginx.conf" />
              <option name="updatedContent" value="server {&#10;    listen 80;&#10;    server_name localhost;&#10;&#10;    # API endpoints&#10;    location /api/ {&#10;        proxy_pass http://web-app:8080/;&#10;        proxy_set_header Host $host;&#10;        proxy_set_header X-Real-IP $remote_addr;&#10;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;        proxy_set_header X-Forwarded-Proto $scheme;&#10;        &#10;        # WebSocket support&#10;        proxy_http_version 1.1;&#10;        proxy_set_header Upgrade $http_upgrade;&#10;        proxy_set_header Connection &quot;upgrade&quot;;&#10;    }&#10;&#10;    # Health check endpoint&#10;    location /health {&#10;        proxy_pass http://web-app:8080/actuator/health;&#10;        proxy_set_header Host $host;&#10;        proxy_set_header X-Real-IP $remote_addr;&#10;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;        proxy_set_header X-Forwarded-Proto $scheme;&#10;    }&#10;&#10;    # Static files (if any)&#10;    location /static/ {&#10;        proxy_pass http://web-app:8080/static/;&#10;    }&#10;&#10;    # Default location&#10;    location / {&#10;        proxy_pass http://web-app:8080/;&#10;        proxy_set_header Host $host;&#10;        proxy_set_header X-Real-IP $remote_addr;&#10;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;        proxy_set_header X-Forwarded-Proto $scheme;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.api&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;demo&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;i-need-courier&lt;/name&gt;&#10;&#9;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;21&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-docker-compose&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.api&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;demo&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;i-need-courier&lt;/name&gt;&#10;&#9;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;21&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.flywaydb&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;flyway-core&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.flywaydb&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;flyway-mysql&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-docker-compose&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&#9;&lt;optional&gt;true&lt;/optional&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/controller/CourierController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/controller/CourierController.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/dto/CourierDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/dto/CourierDTO.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Business.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Business.java" />
              <option name="updatedContent" value="package com.api.demo.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Table(name = &quot;businesses&quot;)&#10;public class Business {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(name = &quot;business_code&quot;, unique = true, nullable = false)&#10;    private String businessCode;&#10;    &#10;    @Column(name = &quot;name&quot;, nullable = false, length = 200)&#10;    private String name;&#10;    &#10;    @Column(name = &quot;contact_person&quot;, length = 100)&#10;    private String contactPerson;&#10;    &#10;    @Column(name = &quot;phone&quot;, nullable = false, length = 20)&#10;    private String phone;&#10;    &#10;    @Column(name = &quot;email&quot;, length = 100)&#10;    private String email;&#10;    &#10;    @Column(name = &quot;address&quot;, nullable = false, length = 500)&#10;    private String address;&#10;    &#10;    @Column(name = &quot;address_description&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String addressDescription;&#10;    &#10;    @Column(name = &quot;latitude&quot;)&#10;    private Double latitude;&#10;    &#10;    @Column(name = &quot;longitude&quot;)&#10;    private Double longitude;&#10;    &#10;    @Column(name = &quot;location_name&quot;, length = 200)&#10;    private String locationName;&#10;    &#10;    @Column(name = &quot;business_type&quot;, length = 100)&#10;    private String businessType;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;payment_terms&quot;)&#10;    private PaymentTerms paymentTerms = PaymentTerms.POSTPAID;&#10;    &#10;    @Column(name = &quot;credit_limit&quot;, precision = 10, scale = 2)&#10;    private BigDecimal creditLimit = BigDecimal.ZERO;&#10;    &#10;    @Column(name = &quot;is_active&quot;)&#10;    private Boolean isActive = true;&#10;    &#10;    @Column(name = &quot;notes&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String notes;&#10;    &#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;    &#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;business&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private Set&lt;Order&gt; orders;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;        if (businessCode == null) {&#10;            businessCode = &quot;BUS&quot; + String.format(&quot;%06d&quot;, System.currentTimeMillis() % 1000000);&#10;        }&#10;    }&#10;    &#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    // Enums&#10;    public enum PaymentTerms {&#10;        PREPAID,        // Ön ödeme&#10;        POSTPAID,       // Vadeli ödeme&#10;        CASH_ON_DELIVERY // Kapıda tahsilat&#10;    }&#10;    &#10;    // Constructors&#10;    public Business() {}&#10;    &#10;    public Business(String name, String phone, String address) {&#10;        this.name = name;&#10;        this.phone = phone;&#10;        this.address = address;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getBusinessCode() { return businessCode; }&#10;    public void setBusinessCode(String businessCode) { this.businessCode = businessCode; }&#10;    &#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;    &#10;    public String getContactPerson() { return contactPerson; }&#10;    public void setContactPerson(String contactPerson) { this.contactPerson = contactPerson; }&#10;    &#10;    public String getPhone() { return phone; }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getAddress() { return address; }&#10;    public void setAddress(String address) { this.address = address; }&#10;    &#10;    public String getAddressDescription() { return addressDescription; }&#10;    public void setAddressDescription(String addressDescription) { this.addressDescription = addressDescription; }&#10;    &#10;    public Double getLatitude() { return latitude; }&#10;    public void setLatitude(Double latitude) { this.latitude = latitude; }&#10;    &#10;    public Double getLongitude() { return longitude; }&#10;    public void setLongitude(Double longitude) { this.longitude = longitude; }&#10;    &#10;    public String getLocationName() { return locationName; }&#10;    public void setLocationName(String locationName) { this.locationName = locationName; }&#10;    &#10;    public String getBusinessType() { return businessType; }&#10;    public void setBusinessType(String businessType) { this.businessType = businessType; }&#10;    &#10;    public PaymentTerms getPaymentTerms() { return paymentTerms; }&#10;    public void setPaymentTerms(PaymentTerms paymentTerms) { this.paymentTerms = paymentTerms; }&#10;    &#10;    public BigDecimal getCreditLimit() { return creditLimit; }&#10;    public void setCreditLimit(BigDecimal creditLimit) { this.creditLimit = creditLimit; }&#10;    &#10;    public Boolean getIsActive() { return isActive; }&#10;    public void setIsActive(Boolean isActive) { this.isActive = isActive; }&#10;    &#10;    public String getNotes() { return notes; }&#10;    public void setNotes(String notes) { this.notes = notes; }&#10;    &#10;    public Set&lt;Order&gt; getOrders() { return orders; }&#10;    public void setOrders(Set&lt;Order&gt; orders) { this.orders = orders; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Coordinator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Coordinator.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.api.demo.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Table(name = &quot;coordinators&quot;)&#10;public class Coordinator {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;system_user_id&quot;, unique = true)&#10;    private SystemUser systemUser;&#10;    &#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;    &#10;    @Column(name = &quot;email&quot;, unique = true, nullable = false)&#10;    private String email;&#10;    &#10;    @Column(name = &quot;phone&quot;, nullable = false)&#10;    private String phone;&#10;    &#10;    @Column(name = &quot;employee_id&quot;, unique = true)&#10;    private String employeeId;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;work_type&quot;, nullable = false)&#10;    private WorkType workType = WorkType.SHIFT;&#10;    &#10;    @Column(name = &quot;shift_start&quot;)&#10;    private LocalTime shiftStart;&#10;    &#10;    @Column(name = &quot;shift_end&quot;)&#10;    private LocalTime shiftEnd;&#10;    &#10;    @Column(name = &quot;is_active&quot;)&#10;    private Boolean isActive = true;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;)&#10;    private CoordinatorStatus status = CoordinatorStatus.OFFLINE;&#10;    &#10;    @Column(name = &quot;current_latitude&quot;)&#10;    private Double currentLatitude;&#10;    &#10;    @Column(name = &quot;current_longitude&quot;)&#10;    private Double currentLongitude;&#10;    &#10;    @Column(name = &quot;coverage_area&quot;, length = 500)&#10;    private String coverageArea;&#10;    &#10;    @Column(name = &quot;max_courier_count&quot;)&#10;    private Integer maxCourierCount = 10;&#10;    &#10;    // İlişkiler&#10;    @OneToMany(mappedBy = &quot;coordinator&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private Set&lt;Courier&gt; managedCouriers;&#10;    &#10;    @OneToMany(mappedBy = &quot;coordinator&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private Set&lt;Order&gt; supervisedOrders;&#10;    &#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    // Enums&#10;    public enum CoordinatorStatus {&#10;        ONLINE, OFFLINE, BUSY, ON_BREAK, IN_FIELD&#10;    }&#10;    &#10;    public enum WorkType {&#10;        JOKER, SHIFT&#10;    }&#10;    &#10;    // Constructors&#10;    public Coordinator() {}&#10;    &#10;    public Coordinator(String name, String email, String phone) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.phone = phone;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public SystemUser getSystemUser() { return systemUser; }&#10;    public void setSystemUser(SystemUser systemUser) { this.systemUser = systemUser; }&#10;    &#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getPhone() { return phone; }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;    &#10;    public String getEmployeeId() { return employeeId; }&#10;    public void setEmployeeId(String employeeId) { this.employeeId = employeeId; }&#10;    &#10;    public WorkType getWorkType() { return workType; }&#10;    public void setWorkType(WorkType workType) { this.workType = workType; }&#10;    &#10;    public LocalTime getShiftStart() { return shiftStart; }&#10;    public void setShiftStart(LocalTime shiftStart) { this.shiftStart = shiftStart; }&#10;    &#10;    public LocalTime getShiftEnd() { return shiftEnd; }&#10;    public void setShiftEnd(LocalTime shiftEnd) { this.shiftEnd = shiftEnd; }&#10;    &#10;    public Boolean getIsActive() { return isActive; }&#10;    public void setIsActive(Boolean isActive) { this.isActive = isActive; }&#10;    &#10;    public CoordinatorStatus getStatus() { return status; }&#10;    public void setStatus(CoordinatorStatus status) { this.status = status; }&#10;    &#10;    public Double getCurrentLatitude() { return currentLatitude; }&#10;    public void setCurrentLatitude(Double currentLatitude) { this.currentLatitude = currentLatitude; }&#10;    &#10;    public Double getCurrentLongitude() { return currentLongitude; }&#10;    public void setCurrentLongitude(Double currentLongitude) { this.currentLongitude = currentLongitude; }&#10;    &#10;    public String getCoverageArea() { return coverageArea; }&#10;    public void setCoverageArea(String coverageArea) { this.coverageArea = coverageArea; }&#10;    &#10;    public Integer getMaxCourierCount() { return maxCourierCount; }&#10;    public void setMaxCourierCount(Integer maxCourierCount) { this.maxCourierCount = maxCourierCount; }&#10;    &#10;    public Set&lt;Courier&gt; getManagedCouriers() { return managedCouriers; }&#10;    public void setManagedCouriers(Set&lt;Courier&gt; managedCouriers) { this.managedCouriers = managedCouriers; }&#10;    &#10;    public Set&lt;Order&gt; getSupervisedOrders() { return supervisedOrders; }&#10;    public void setSupervisedOrders(Set&lt;Order&gt; supervisedOrders) { this.supervisedOrders = supervisedOrders; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Courier.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Courier.java" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.api.demo.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.util.Set;&#10;&#10;@Entity&#10;@Table(name = &quot;couriers&quot;)&#10;public class Courier {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;system_user_id&quot;, unique = true)&#10;    private SystemUser systemUser;&#10;&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @Column(name = &quot;email&quot;, unique = true, nullable = false)&#10;    private String email;&#10;&#10;    @Column(name = &quot;phone&quot;, nullable = false)&#10;    private String phone;&#10;&#10;    @Column(name = &quot;license_number&quot;)&#10;    private String licenseNumber;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;vehicle_type&quot;)&#10;    private VehicleType vehicleType;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;work_type&quot;, nullable = false)&#10;    private WorkType workType = WorkType.SHIFT;&#10;&#10;    @Column(name = &quot;shift_start&quot;)&#10;    private LocalTime shiftStart;&#10;&#10;    @Column(name = &quot;shift_end&quot;)&#10;    private LocalTime shiftEnd;&#10;&#10;    @Column(name = &quot;is_available&quot;)&#10;    private Boolean isAvailable = true;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;)&#10;    private CourierStatus status = CourierStatus.OFFLINE;&#10;&#10;    @Column(name = &quot;current_latitude&quot;)&#10;    private Double currentLatitude;&#10;&#10;    @Column(name = &quot;current_longitude&quot;)&#10;    private Double currentLongitude;&#10;&#10;    @Column(name = &quot;current_location_name&quot;)&#10;    private String currentLocationName;&#10;&#10;    @Column(name = &quot;total_deliveries&quot;)&#10;    private Integer totalDeliveries = 0;&#10;&#10;    // Koordinatör ilişkisi&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;coordinator_id&quot;)&#10;    private Coordinator coordinator;&#10;&#10;    // Relationships&#10;    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;vehicle_id&quot;)&#10;    private Vehicle vehicle;&#10;&#10;    @OneToMany(mappedBy = &quot;courier&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private Set&lt;Order&gt; orders;&#10;&#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;&#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Enums&#10;    public enum CourierStatus {&#10;        ONLINE, OFFLINE, BUSY, ON_BREAK, IN_DELIVERY&#10;    }&#10;&#10;    public enum WorkType {&#10;        JOKER,    // Esnek çalışma&#10;        SHIFT     // Vardiyalı çalışma&#10;    }&#10;&#10;    public enum VehicleType {&#10;        BICYCLE, MOTORCYCLE, CAR, VAN, TRUCK, WALKING&#10;    }&#10;&#10;    // Constructors&#10;    public Courier() {}&#10;&#10;    public Courier(String name, String email, String phone) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.phone = phone;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;&#10;    public SystemUser getSystemUser() { return systemUser; }&#10;    public void setSystemUser(SystemUser systemUser) { this.systemUser = systemUser; }&#10;&#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;&#10;    public String getPhone() { return phone; }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;&#10;    public String getLicenseNumber() { return licenseNumber; }&#10;    public void setLicenseNumber(String licenseNumber) { this.licenseNumber = licenseNumber; }&#10;&#10;    public VehicleType getVehicleType() { return vehicleType; }&#10;    public void setVehicleType(VehicleType vehicleType) { this.vehicleType = vehicleType; }&#10;&#10;    public WorkType getWorkType() { return workType; }&#10;    public void setWorkType(WorkType workType) { this.workType = workType; }&#10;&#10;    public LocalTime getShiftStart() { return shiftStart; }&#10;    public void setShiftStart(LocalTime shiftStart) { this.shiftStart = shiftStart; }&#10;&#10;    public LocalTime getShiftEnd() { return shiftEnd; }&#10;    public void setShiftEnd(LocalTime shiftEnd) { this.shiftEnd = shiftEnd; }&#10;&#10;    public Boolean getIsAvailable() { return isAvailable; }&#10;    public void setIsAvailable(Boolean isAvailable) { this.isAvailable = isAvailable; }&#10;&#10;    public CourierStatus getStatus() { return status; }&#10;    public void setStatus(CourierStatus status) { this.status = status; }&#10;&#10;    public Double getCurrentLatitude() { return currentLatitude; }&#10;    public void setCurrentLatitude(Double currentLatitude) { this.currentLatitude = currentLatitude; }&#10;&#10;    public Double getCurrentLongitude() { return currentLongitude; }&#10;    public void setCurrentLongitude(Double currentLongitude) { this.currentLongitude = currentLongitude; }&#10;&#10;    public String getCurrentLocationName() { return currentLocationName; }&#10;    public void setCurrentLocationName(String currentLocationName) { this.currentLocationName = currentLocationName; }&#10;&#10;    public Integer getTotalDeliveries() { return totalDeliveries; }&#10;    public void setTotalDeliveries(Integer totalDeliveries) { this.totalDeliveries = totalDeliveries; }&#10;&#10;    public Coordinator getCoordinator() { return coordinator; }&#10;    public void setCoordinator(Coordinator coordinator) { this.coordinator = coordinator; }&#10;&#10;    public Vehicle getVehicle() { return vehicle; }&#10;    public void setVehicle(Vehicle vehicle) { this.vehicle = vehicle; }&#10;&#10;    public Set&lt;Order&gt; getOrders() { return orders; }&#10;    public void setOrders(Set&lt;Order&gt; orders) { this.orders = orders; }&#10;&#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;&#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Order.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.api.demo.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;orders&quot;)&#10;public class Order {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(name = &quot;order_number&quot;, unique = true, nullable = false)&#10;    private String orderNumber;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;)&#10;    private OrderStatus status = OrderStatus.PENDING;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;priority&quot;)&#10;    private OrderPriority priority = OrderPriority.NORMAL;&#10;    &#10;    // İşletme bilgileri (sipariş veren)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;business_id&quot;, nullable = false)&#10;    private Business business;&#10;    &#10;    @Column(name = &quot;business_contact_person&quot;)&#10;    private String businessContactPerson;&#10;    &#10;    @Column(name = &quot;business_phone&quot;)&#10;    private String businessPhone;&#10;    &#10;    // Kurye ve koordinatör bilgileri&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;courier_id&quot;)&#10;    private Courier courier;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;coordinator_id&quot;)&#10;    private Coordinator coordinator;&#10;    &#10;    // Son müşteri bilgileri (teslimat alacak kişi)&#10;    @Column(name = &quot;end_customer_name&quot;, nullable = false)&#10;    private String endCustomerName;&#10;    &#10;    @Column(name = &quot;end_customer_phone&quot;)&#10;    private String endCustomerPhone;&#10;    &#10;    // Alım lokasyonu (işletmeden)&#10;    @Column(name = &quot;pickup_address&quot;, nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String pickupAddress;&#10;    &#10;    @Column(name = &quot;pickup_address_description&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String pickupAddressDescription;&#10;    &#10;    @Column(name = &quot;pickup_latitude&quot;)&#10;    private Double pickupLatitude;&#10;    &#10;    @Column(name = &quot;pickup_longitude&quot;)&#10;    private Double pickupLongitude;&#10;    &#10;    @Column(name = &quot;pickup_location_name&quot;)&#10;    private String pickupLocationName;&#10;    &#10;    @Column(name = &quot;pickup_contact_person&quot;)&#10;    private String pickupContactPerson;&#10;    &#10;    // Teslimat lokasyonu (son müşteriye)&#10;    @Column(name = &quot;delivery_address&quot;, nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String deliveryAddress;&#10;    &#10;    @Column(name = &quot;delivery_address_description&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String deliveryAddressDescription;&#10;    &#10;    @Column(name = &quot;delivery_latitude&quot;)&#10;    private Double deliveryLatitude;&#10;    &#10;    @Column(name = &quot;delivery_longitude&quot;)&#10;    private Double deliveryLongitude;&#10;    &#10;    @Column(name = &quot;delivery_location_name&quot;)&#10;    private String deliveryLocationName;&#10;    &#10;    // Paket bilgileri&#10;    @Column(name = &quot;package_description&quot;, nullable = false, length = 500)&#10;    private String packageDescription;&#10;    &#10;    @Column(name = &quot;package_weight&quot;)&#10;    private Double packageWeight;&#10;    &#10;    @Column(name = &quot;package_count&quot;)&#10;    private Integer packageCount = 1;&#10;    &#10;    @Column(name = &quot;package_value&quot;, precision = 10, scale = 2)&#10;    private BigDecimal packageValue;&#10;    &#10;    // Ödeme bilgileri&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;payment_type&quot;)&#10;    private PaymentType paymentType = PaymentType.BUSINESS_ACCOUNT;&#10;    &#10;    @Column(name = &quot;delivery_fee&quot;, precision = 10, scale = 2, nullable = false)&#10;    private BigDecimal deliveryFee;&#10;    &#10;    @Column(name = &quot;collection_amount&quot;, precision = 10, scale = 2)&#10;    private BigDecimal collectionAmount = BigDecimal.ZERO;&#10;    &#10;    // Notlar ve dökümanlar&#10;    @Column(name = &quot;courier_notes&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String courierNotes;&#10;    &#10;    @Column(name = &quot;business_notes&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String businessNotes;&#10;    &#10;    @Column(name = &quot;receipt_image_url&quot;, length = 500)&#10;    private String receiptImageUrl;&#10;    &#10;    @Column(name = &quot;delivery_proof_url&quot;, length = 500)&#10;    private String deliveryProofUrl;&#10;    &#10;    // Zaman bilgileri&#10;    @Column(name = &quot;order_date&quot;)&#10;    private LocalDateTime orderDate;&#10;    &#10;    @Column(name = &quot;scheduled_pickup_time&quot;)&#10;    private LocalDateTime scheduledPickupTime;&#10;    &#10;    @Column(name = &quot;actual_pickup_time&quot;)&#10;    private LocalDateTime actualPickupTime;&#10;    &#10;    @Column(name = &quot;estimated_delivery_time&quot;)&#10;    private LocalDateTime estimatedDeliveryTime;&#10;    &#10;    @Column(name = &quot;actual_delivery_time&quot;)&#10;    private LocalDateTime actualDeliveryTime;&#10;    &#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;        orderDate = LocalDateTime.now();&#10;        if (orderNumber == null) {&#10;            orderNumber = &quot;ORD-&quot; + System.currentTimeMillis();&#10;        }&#10;    }&#10;    &#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    // Enums&#10;    public enum OrderStatus {&#10;        PENDING, ASSIGNED, PICKED_UP, IN_TRANSIT, DELIVERED, CANCELLED&#10;    }&#10;    &#10;    public enum OrderPriority {&#10;        LOW, NORMAL, HIGH, URGENT&#10;    }&#10;    &#10;    public enum PaymentType {&#10;        CASH, CARD, ONLINE, BUSINESS_ACCOUNT&#10;    }&#10;    &#10;    // Constructors&#10;    public Order() {}&#10;    &#10;    public Order(Business business, String endCustomerName, String pickupAddress, String deliveryAddress, String packageDescription, BigDecimal deliveryFee) {&#10;        this.business = business;&#10;        this.endCustomerName = endCustomerName;&#10;        this.pickupAddress = pickupAddress;&#10;        this.deliveryAddress = deliveryAddress;&#10;        this.packageDescription = packageDescription;&#10;        this.deliveryFee = deliveryFee;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getOrderNumber() { return orderNumber; }&#10;    public void setOrderNumber(String orderNumber) { this.orderNumber = orderNumber; }&#10;    &#10;    public OrderStatus getStatus() { return status; }&#10;    public void setStatus(OrderStatus status) { this.status = status; }&#10;    &#10;    public OrderPriority getPriority() { return priority; }&#10;    public void setPriority(OrderPriority priority) { this.priority = priority; }&#10;    &#10;    public Business getBusiness() { return business; }&#10;    public void setBusiness(Business business) { this.business = business; }&#10;    &#10;    public String getBusinessContactPerson() { return businessContactPerson; }&#10;    public void setBusinessContactPerson(String businessContactPerson) { this.businessContactPerson = businessContactPerson; }&#10;    &#10;    public String getBusinessPhone() { return businessPhone; }&#10;    public void setBusinessPhone(String businessPhone) { this.businessPhone = businessPhone; }&#10;    &#10;    public Courier getCourier() { return courier; }&#10;    public void setCourier(Courier courier) { this.courier = courier; }&#10;    &#10;    public Coordinator getCoordinator() { return coordinator; }&#10;    public void setCoordinator(Coordinator coordinator) { this.coordinator = coordinator; }&#10;    &#10;    public String getEndCustomerName() { return endCustomerName; }&#10;    public void setEndCustomerName(String endCustomerName) { this.endCustomerName = endCustomerName; }&#10;    &#10;    public String getEndCustomerPhone() { return endCustomerPhone; }&#10;    public void setEndCustomerPhone(String endCustomerPhone) { this.endCustomerPhone = endCustomerPhone; }&#10;    &#10;    public String getPickupAddress() { return pickupAddress; }&#10;    public void setPickupAddress(String pickupAddress) { this.pickupAddress = pickupAddress; }&#10;    &#10;    public String getPickupAddressDescription() { return pickupAddressDescription; }&#10;    public void setPickupAddressDescription(String pickupAddressDescription) { this.pickupAddressDescription = pickupAddressDescription; }&#10;    &#10;    public String getDeliveryAddress() { return deliveryAddress; }&#10;    public void setDeliveryAddress(String deliveryAddress) { this.deliveryAddress = deliveryAddress; }&#10;    &#10;    public String getDeliveryAddressDescription() { return deliveryAddressDescription; }&#10;    public void setDeliveryAddressDescription(String deliveryAddressDescription) { this.deliveryAddressDescription = deliveryAddressDescription; }&#10;    &#10;    public String getPackageDescription() { return packageDescription; }&#10;    public void setPackageDescription(String packageDescription) { this.packageDescription = packageDescription; }&#10;    &#10;    public Double getPackageWeight() { return packageWeight; }&#10;    public void setPackageWeight(Double packageWeight) { this.packageWeight = packageWeight; }&#10;    &#10;    public Integer getPackageCount() { return packageCount; }&#10;    public void setPackageCount(Integer packageCount) { this.packageCount = packageCount; }&#10;    &#10;    public BigDecimal getDeliveryFee() { return deliveryFee; }&#10;    public void setDeliveryFee(BigDecimal deliveryFee) { this.deliveryFee = deliveryFee; }&#10;    &#10;    public BigDecimal getCollectionAmount() { return collectionAmount; }&#10;    public void setCollectionAmount(BigDecimal collectionAmount) { this.collectionAmount = collectionAmount; }&#10;    &#10;    public PaymentType getPaymentType() { return paymentType; }&#10;    public void setPaymentType(PaymentType paymentType) { this.paymentType = paymentType; }&#10;    &#10;    public String getCourierNotes() { return courierNotes; }&#10;    public void setCourierNotes(String courierNotes) { this.courierNotes = courierNotes; }&#10;    &#10;    public String getBusinessNotes() { return businessNotes; }&#10;    public void setBusinessNotes(String businessNotes) { this.businessNotes = businessNotes; }&#10;    &#10;    public String getReceiptImageUrl() { return receiptImageUrl; }&#10;    public void setReceiptImageUrl(String receiptImageUrl) { this.receiptImageUrl = receiptImageUrl; }&#10;    &#10;    public String getDeliveryProofUrl() { return deliveryProofUrl; }&#10;    public void setDeliveryProofUrl(String deliveryProofUrl) { this.deliveryProofUrl = deliveryProofUrl; }&#10;    &#10;    public LocalDateTime getOrderDate() { return orderDate; }&#10;    public void setOrderDate(LocalDateTime orderDate) { this.orderDate = orderDate; }&#10;    &#10;    public LocalDateTime getScheduledPickupTime() { return scheduledPickupTime; }&#10;    public void setScheduledPickupTime(LocalDateTime scheduledPickupTime) { this.scheduledPickupTime = scheduledPickupTime; }&#10;    &#10;    public LocalDateTime getActualPickupTime() { return actualPickupTime; }&#10;    public void setActualPickupTime(LocalDateTime actualPickupTime) { this.actualPickupTime = actualPickupTime; }&#10;    &#10;    public LocalDateTime getEstimatedDeliveryTime() { return estimatedDeliveryTime; }&#10;    public void setEstimatedDeliveryTime(LocalDateTime estimatedDeliveryTime) { this.estimatedDeliveryTime = estimatedDeliveryTime; }&#10;    &#10;    public LocalDateTime getActualDeliveryTime() { return actualDeliveryTime; }&#10;    public void setActualDeliveryTime(LocalDateTime actualDeliveryTime) { this.actualDeliveryTime = actualDeliveryTime; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;    &#10;    // Additional getters for convenience&#10;    public Double getPickupLatitude() { return pickupLatitude; }&#10;    public void setPickupLatitude(Double pickupLatitude) { this.pickupLatitude = pickupLatitude; }&#10;    &#10;    public Double getPickupLongitude() { return pickupLongitude; }&#10;    public void setPickupLongitude(Double pickupLongitude) { this.pickupLongitude = pickupLongitude; }&#10;    &#10;    public String getPickupLocationName() { return pickupLocationName; }&#10;    public void setPickupLocationName(String pickupLocationName) { this.pickupLocationName = pickupLocationName; }&#10;    &#10;    public String getPickupContactPerson() { return pickupContactPerson; }&#10;    public void setPickupContactPerson(String pickupContactPerson) { this.pickupContactPerson = pickupContactPerson; }&#10;    &#10;    public Double getDeliveryLatitude() { return deliveryLatitude; }&#10;    public void setDeliveryLatitude(Double deliveryLatitude) { this.deliveryLatitude = deliveryLatitude; }&#10;    &#10;    public Double getDeliveryLongitude() { return deliveryLongitude; }&#10;    public void setDeliveryLongitude(Double deliveryLongitude) { this.deliveryLongitude = deliveryLongitude; }&#10;    &#10;    public String getDeliveryLocationName() { return deliveryLocationName; }&#10;    public void setDeliveryLocationName(String deliveryLocationName) { this.deliveryLocationName = deliveryLocationName; }&#10;    &#10;    public BigDecimal getPackageValue() { return packageValue; }&#10;    public void setPackageValue(BigDecimal packageValue) { this.packageValue = packageValue; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/OrderTracking.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/OrderTracking.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/SystemUser.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/SystemUser.java" />
              <option name="updatedContent" value="package com.api.demo.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;system_users&quot;)&#10;public class SystemUser {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(name = &quot;username&quot;, unique = true, nullable = false, length = 50)&#10;    private String username;&#10;    &#10;    @Column(name = &quot;email&quot;, unique = true, nullable = false, length = 100)&#10;    private String email;&#10;    &#10;    @Column(name = &quot;password&quot;, nullable = false)&#10;    private String password;&#10;    &#10;    @Column(name = &quot;first_name&quot;, length = 50)&#10;    private String firstName;&#10;    &#10;    @Column(name = &quot;last_name&quot;, length = 50)&#10;    private String lastName;&#10;    &#10;    @Column(name = &quot;phone&quot;, length = 20)&#10;    private String phone;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;role&quot;, nullable = false)&#10;    private UserRole role;&#10;    &#10;    @Column(name = &quot;is_active&quot;)&#10;    private Boolean isActive = true;&#10;    &#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    // Enum for system user roles&#10;    public enum UserRole {&#10;        ADMIN,          // Sistem yöneticisi&#10;        COORDINATOR,    // Koordinatör/Takım kaptanı&#10;        COURIER         // Kurye&#10;    }&#10;    &#10;    // Constructors&#10;    public SystemUser() {}&#10;    &#10;    public SystemUser(String username, String email, String password, UserRole role) {&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.role = role;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;    &#10;    public String getFirstName() { return firstName; }&#10;    public void setFirstName(String firstName) { this.firstName = firstName; }&#10;    &#10;    public String getLastName() { return lastName; }&#10;    public void setLastName(String lastName) { this.lastName = lastName; }&#10;    &#10;    public String getPhone() { return phone; }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;    &#10;    public UserRole getRole() { return role; }&#10;    public void setRole(UserRole role) { this.role = role; }&#10;    &#10;    public Boolean getIsActive() { return isActive; }&#10;    public void setIsActive(Boolean isActive) { this.isActive = isActive; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#10;    &#10;    // Helper methods&#10;    public String getFullName() {&#10;        return (firstName != null ? firstName : &quot;&quot;) + &quot; &quot; + (lastName != null ? lastName : &quot;&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/User.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Vehicle.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/entity/Vehicle.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/exception/GlobalExceptionHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/exception/GlobalExceptionHandler.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/repository/CourierRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/repository/CourierRepository.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/api/demo/service/CourierService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/api/demo/service/CourierService.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=i-need-courier&#10;&#10;# Server configuration&#10;server.port=8080&#10;&#10;# Security configuration&#10;spring.security.user.name=admin&#10;spring.security.user.password=admin123&#10;spring.security.user.roles=ADMIN&#10;&#10;# Database configuration&#10;spring.datasource.url=jdbc:mysql://mysql:3306/courier_db?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&#10;spring.datasource.username=courier_user&#10;spring.datasource.password=courier_password&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;&#10;# JPA configuration&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect&#10;spring.jpa.show-sql=true&#10;&#10;# Redis configuration&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.session.store-type=redis&#10;&#10;# Kafka configuration&#10;spring.kafka.bootstrap-servers=kafka:9092&#10;spring.kafka.consumer.group-id=courier-service&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;&#10;# Actuator configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;" />
              <option name="updatedContent" value="spring.application.name=i-need-courier&#10;&#10;# Server configuration&#10;server.port=8080&#10;&#10;# Security configuration&#10;spring.security.user.name=admin&#10;spring.security.user.password=admin123&#10;spring.security.user.roles=ADMIN&#10;&#10;# Database configuration&#10;spring.datasource.url=jdbc:mysql://mysql:3306/courier_db?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&#10;spring.datasource.username=courier_user&#10;spring.datasource.password=courier_password&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;&#10;# JPA configuration&#10;spring.jpa.hibernate.ddl-auto=validate&#10;spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect&#10;spring.jpa.show-sql=true&#10;&#10;# Flyway configuration&#10;spring.flyway.enabled=true&#10;spring.flyway.locations=classpath:db/migration&#10;spring.flyway.baseline-on-migrate=true&#10;spring.flyway.validate-on-migrate=true&#10;&#10;# Redis configuration&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.session.store-type=redis&#10;&#10;# Kafka configuration&#10;spring.kafka.bootstrap-servers=kafka:9092&#10;spring.kafka.consumer.group-id=courier-service&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;&#10;# Actuator configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V1__Create_initial_tables.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V1__Create_initial_tables.sql" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="-- V1__Create_initial_tables.sql&#10;-- B2B Kurye servisi için temel tabloları oluşturan migration&#10;&#10;-- System Users tablosu (Sadece sistem kullanıcıları: Admin, Koordinatör, Kurye)&#10;CREATE TABLE system_users (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    username VARCHAR(50) UNIQUE NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    password VARCHAR(255) NOT NULL,&#10;    first_name VARCHAR(50),&#10;    last_name VARCHAR(50),&#10;    phone VARCHAR(20),&#10;    role ENUM('ADMIN', 'COORDINATOR', 'COURIER') NOT NULL,&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;&#10;    INDEX idx_email (email),&#10;    INDEX idx_username (username),&#10;    INDEX idx_role (role),&#10;    INDEX idx_is_active (is_active)&#10;);&#10;&#10;-- Vehicles tablosu (Araç bilgileri)&#10;CREATE TABLE vehicles (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    plate_number VARCHAR(20) UNIQUE NOT NULL,&#10;    vehicle_type ENUM('BICYCLE', 'MOTORCYCLE', 'CAR', 'VAN', 'TRUCK', 'WALKING') NOT NULL,&#10;    brand VARCHAR(50),&#10;    model VARCHAR(50),&#10;    year INT,&#10;    color VARCHAR(30),&#10;    max_weight_capacity DECIMAL(8,2) COMMENT 'Maksimum taşıma kapasitesi (kg)',&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;&#10;    INDEX idx_plate_number (plate_number),&#10;    INDEX idx_vehicle_type (vehicle_type),&#10;    INDEX idx_is_active (is_active)&#10;);&#10;&#10;-- Coordinators tablosu (Takım kaptanları/koordinatörler)&#10;CREATE TABLE coordinators (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    system_user_id BIGINT UNIQUE,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20) NOT NULL,&#10;    employee_id VARCHAR(50) UNIQUE,&#10;    work_type ENUM('JOKER', 'SHIFT') DEFAULT 'SHIFT',&#10;    shift_start TIME,&#10;    shift_end TIME,&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    status ENUM('ONLINE', 'OFFLINE', 'BUSY', 'ON_BREAK', 'IN_FIELD') DEFAULT 'OFFLINE',&#10;    current_latitude DECIMAL(10, 8),&#10;    current_longitude DECIMAL(11, 8),&#10;    coverage_area VARCHAR(500) COMMENT 'Sorumlu olduğu bölge',&#10;    max_courier_count INT DEFAULT 10 COMMENT 'Maksimum yönetebileceği kurye sayısı',&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;&#10;    FOREIGN KEY (system_user_id) REFERENCES system_users(id) ON DELETE SET NULL,&#10;    INDEX idx_email (email),&#10;    INDEX idx_employee_id (employee_id),&#10;    INDEX idx_status (status),&#10;    INDEX idx_is_active (is_active),&#10;    INDEX idx_location (current_latitude, current_longitude)&#10;);&#10;&#10;-- Couriers tablosu (Kuryeler)&#10;CREATE TABLE couriers (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    system_user_id BIGINT UNIQUE,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20) NOT NULL,&#10;    license_number VARCHAR(50),&#10;    vehicle_type ENUM('BICYCLE', 'MOTORCYCLE', 'CAR', 'VAN', 'TRUCK', 'WALKING'),&#10;    work_type ENUM('JOKER', 'SHIFT') DEFAULT 'SHIFT',&#10;    shift_start TIME,&#10;    shift_end TIME,&#10;    is_available BOOLEAN DEFAULT TRUE,&#10;    status ENUM('ONLINE', 'OFFLINE', 'BUSY', 'ON_BREAK', 'IN_DELIVERY') DEFAULT 'OFFLINE',&#10;    current_latitude DECIMAL(10, 8),&#10;    current_longitude DECIMAL(11, 8),&#10;    current_location_name VARCHAR(200),&#10;    total_deliveries INT DEFAULT 0,&#10;    vehicle_id BIGINT,&#10;    coordinator_id BIGINT,&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;&#10;    FOREIGN KEY (system_user_id) REFERENCES system_users(id) ON DELETE SET NULL,&#10;    FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE SET NULL,&#10;    FOREIGN KEY (coordinator_id) REFERENCES coordinators(id) ON DELETE SET NULL,&#10;    INDEX idx_email (email),&#10;    INDEX idx_status (status),&#10;    INDEX idx_is_available (is_available),&#10;    INDEX idx_work_type (work_type),&#10;    INDEX idx_vehicle_type (vehicle_type),&#10;    INDEX idx_location (current_latitude, current_longitude),&#10;    INDEX idx_coordinator_id (coordinator_id)&#10;);&#10;&#10;-- Business/Company tablosu (İşletmeler - sipariş veren firmalar)&#10;CREATE TABLE businesses (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    business_code VARCHAR(50) UNIQUE NOT NULL COMMENT 'İşletme kodu (otomatik veya manuel)',&#10;    name VARCHAR(200) NOT NULL,&#10;    contact_person VARCHAR(100) COMMENT 'İrtibat kişisi',&#10;    phone VARCHAR(20) NOT NULL,&#10;    email VARCHAR(100),&#10;    address VARCHAR(500) NOT NULL,&#10;    address_description TEXT COMMENT 'Adres tarifi - detaylı açıklama',&#10;    latitude DECIMAL(10, 8),&#10;    longitude DECIMAL(11, 8),&#10;    location_name VARCHAR(200) COMMENT 'Konum ismi (Kadıköy, Merkez vb.)',&#10;    business_type VARCHAR(100) COMMENT 'İşletme türü (Restaurant, Market, Eczane vb.)',&#10;    payment_terms ENUM('PREPAID', 'POSTPAID', 'CASH_ON_DELIVERY') DEFAULT 'POSTPAID',&#10;    credit_limit DECIMAL(10,2) DEFAULT 0.00,&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    notes TEXT COMMENT 'İşletme hakkında özel notlar',&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;&#10;    INDEX idx_business_code (business_code),&#10;    INDEX idx_name (name),&#10;    INDEX idx_phone (phone),&#10;    INDEX idx_business_type (business_type),&#10;    INDEX idx_is_active (is_active),&#10;    INDEX idx_location (latitude, longitude)&#10;);&#10;&#10;-- Orders tablosu (Siparişler/Paketler)&#10;CREATE TABLE orders (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    order_number VARCHAR(50) UNIQUE NOT NULL,&#10;    status ENUM('PENDING', 'ASSIGNED', 'PICKED_UP', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED') DEFAULT 'PENDING',&#10;    priority ENUM('LOW', 'NORMAL', 'HIGH', 'URGENT') DEFAULT 'NORMAL',&#10;&#10;    -- İşletme bilgileri (sipariş veren)&#10;    business_id BIGINT NOT NULL,&#10;    business_contact_person VARCHAR(100),&#10;    business_phone VARCHAR(20),&#10;&#10;    -- Kurye ve koordinatör bilgileri&#10;    courier_id BIGINT,&#10;    coordinator_id BIGINT,&#10;&#10;    -- Son müşteri bilgileri (teslimat alacak kişi)&#10;    end_customer_name VARCHAR(100) NOT NULL COMMENT 'Teslimatı alacak kişi',&#10;    end_customer_phone VARCHAR(20) COMMENT 'Teslimatı alacak kişinin telefonu',&#10;&#10;    -- Alım lokasyonu (işletmeden)&#10;    pickup_address TEXT NOT NULL,&#10;    pickup_address_description TEXT COMMENT 'Alım adresi tarifi',&#10;    pickup_latitude DECIMAL(10, 8),&#10;    pickup_longitude DECIMAL(11, 8),&#10;    pickup_location_name VARCHAR(200),&#10;    pickup_contact_person VARCHAR(100) COMMENT 'Alım yerindeki irtibat kişisi',&#10;&#10;    -- Teslimat lokasyonu (son müşteriye)&#10;    delivery_address TEXT NOT NULL,&#10;    delivery_address_description TEXT COMMENT 'Teslimat adresi tarifi',&#10;    delivery_latitude DECIMAL(10, 8),&#10;    delivery_longitude DECIMAL(11, 8),&#10;    delivery_location_name VARCHAR(200),&#10;&#10;    -- Paket bilgileri&#10;    package_description VARCHAR(500) NOT NULL,&#10;    package_weight DECIMAL(8,2) COMMENT 'Paket ağırlığı (kg)',&#10;    package_count INT DEFAULT 1 COMMENT 'Paket adedi',&#10;    package_value DECIMAL(10,2) COMMENT 'Paket değeri (sigorta için)',&#10;&#10;    -- Ödeme bilgileri&#10;    payment_type ENUM('CASH', 'CARD', 'ONLINE', 'BUSINESS_ACCOUNT') DEFAULT 'BUSINESS_ACCOUNT',&#10;    delivery_fee DECIMAL(10,2) NOT NULL,&#10;    collection_amount DECIMAL(10,2) DEFAULT 0.00 COMMENT 'Tahsil edilecek tutar (varsa)',&#10;&#10;    -- Notlar ve dökümanlar&#10;    courier_notes TEXT COMMENT 'Kuryeye özel notlar',&#10;    business_notes TEXT COMMENT 'İşletmenin notları',&#10;    receipt_image_url VARCHAR(500) COMMENT 'Fiş/Adisyon resmi URL',&#10;    delivery_proof_url VARCHAR(500) COMMENT 'Teslimat kanıtı resmi URL',&#10;&#10;    -- Zaman bilgileri&#10;    order_date DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Sipariş tarihi',&#10;    scheduled_pickup_time DATETIME COMMENT 'Planlanan alım zamanı',&#10;    actual_pickup_time DATETIME COMMENT 'Gerçek alım zamanı',&#10;    estimated_delivery_time DATETIME COMMENT 'Tahmini teslimat zamanı',&#10;    actual_delivery_time DATETIME COMMENT 'Gerçek teslimat zamanı',&#10;&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;&#10;    FOREIGN KEY (business_id) REFERENCES businesses(id) ON DELETE RESTRICT,&#10;    FOREIGN KEY (courier_id) REFERENCES couriers(id) ON DELETE SET NULL,&#10;    FOREIGN KEY (coordinator_id) REFERENCES coordinators(id) ON DELETE SET NULL,&#10;&#10;    INDEX idx_order_number (order_number),&#10;    INDEX idx_status (status),&#10;    INDEX idx_priority (priority),&#10;    INDEX idx_business_id (business_id),&#10;    INDEX idx_courier_id (courier_id),&#10;    INDEX idx_coordinator_id (coordinator_id),&#10;    INDEX idx_order_date (order_date),&#10;    INDEX idx_scheduled_pickup (scheduled_pickup_time),&#10;    INDEX idx_estimated_delivery (estimated_delivery_time),&#10;    INDEX idx_payment_type (payment_type)&#10;);&#10;&#10;-- Order tracking tablosu (Sipariş takip geçmişi)&#10;CREATE TABLE order_tracking (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    order_id BIGINT NOT NULL,&#10;    status ENUM('PENDING', 'ASSIGNED', 'PICKED_UP', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED') NOT NULL,&#10;    description VARCHAR(500),&#10;    location VARCHAR(200),&#10;    latitude DECIMAL(10, 8),&#10;    longitude DECIMAL(11, 8),&#10;    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    created_by VARCHAR(100) COMMENT 'Durumu güncelleyen kişi (kurye adı, koordinatör veya sistem)',&#10;    created_by_type ENUM('SYSTEM', 'COURIER', 'COORDINATOR', 'ADMIN') DEFAULT 'SYSTEM',&#10;&#10;    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,&#10;    INDEX idx_order_id (order_id),&#10;    INDEX idx_status (status),&#10;    INDEX idx_created_at (created_at),&#10;    INDEX idx_location (latitude, longitude),&#10;    INDEX idx_created_by_type (created_by_type)&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V2__Insert_initial_data.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V2__Insert_initial_data.sql" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="-- V2__Insert_initial_data.sql&#10;-- B2B Kurye servisi için örnek veriler&#10;&#10;-- Sistem kullanıcıları (Admin, Koordinatör, Kurye)&#10;INSERT INTO system_users (username, email, password, first_name, last_name, role, is_active) VALUES&#10;('admin', 'admin@courier.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'System', 'Admin', 'ADMIN', true),&#10;('coord1', 'ahmet.yilmaz@courier.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'Ahmet', 'Yılmaz', 'COORDINATOR', true),&#10;('coord2', 'ayse.demir@courier.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'Ayşe', 'Demir', 'COORDINATOR', true),&#10;('courier1', 'ali.ozkan@courier.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'Ali', 'Özkan', 'COURIER', true),&#10;('courier2', 'fatma.celik@courier.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'Fatma', 'Çelik', 'COURIER', true),&#10;('courier3', 'osman.acar@courier.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'Osman', 'Acar', 'COURIER', true);&#10;&#10;-- Örnek araçlar&#10;INSERT INTO vehicles (plate_number, vehicle_type, brand, model, year, color, max_weight_capacity, is_active) VALUES&#10;('34ABC123', 'MOTORCYCLE', 'Yamaha', 'NMAX', 2023, 'Siyah', 30.00, true),&#10;('34DEF456', 'MOTORCYCLE', 'Honda', 'PCX', 2022, 'Beyaz', 25.00, true),&#10;('34GHI789', 'CAR', 'Renault', 'Clio', 2021, 'Gri', 300.00, true),&#10;('BIKE001', 'BICYCLE', 'Bianchi', 'City', 2023, 'Mavi', 15.00, true),&#10;('34JKL012', 'VAN', 'Ford', 'Transit', 2020, 'Beyaz', 1000.00, true);&#10;&#10;-- Koordinatörler&#10;INSERT INTO coordinators (system_user_id, name, email, phone, employee_id, work_type, shift_start, shift_end, status, coverage_area, max_courier_count, is_active) VALUES&#10;(2, 'Ahmet Yılmaz', 'ahmet.yilmaz@courier.com', '+905551234567', 'COORD001', 'SHIFT', '09:00:00', '18:00:00', 'ONLINE', 'Kadıköy, Üsküdar, Ataşehir', 15, true),&#10;(3, 'Ayşe Demir', 'ayse.demir@courier.com', '+905551234568', 'COORD002', 'SHIFT', '18:00:00', '03:00:00', 'OFFLINE', 'Beşiktaş, Şişli, Beyoğlu', 12, true);&#10;&#10;-- Kuryeler (rating alanı kaldırıldı)&#10;INSERT INTO couriers (system_user_id, name, email, phone, license_number, vehicle_type, work_type, shift_start, shift_end, status, total_deliveries, vehicle_id, coordinator_id, is_available) VALUES&#10;(4, 'Ali Özkan', 'ali.ozkan@courier.com', '+905551111111', 'B123456', 'MOTORCYCLE', 'SHIFT', '09:00:00', '18:00:00', 'ONLINE', 150, 1, 1, true),&#10;(5, 'Fatma Çelik', 'fatma.celik@courier.com', '+905552222222', 'B234567', 'MOTORCYCLE', 'SHIFT', '09:00:00', '18:00:00', 'OFFLINE', 200, 2, 1, true),&#10;(6, 'Osman Acar', 'osman.acar@courier.com', '+905553333333', 'B345678', 'CAR', 'SHIFT', '18:00:00', '03:00:00', 'ONLINE', 120, 3, 2, true);&#10;&#10;-- İşletmeler (sipariş veren firmalar)&#10;INSERT INTO businesses (business_code, name, contact_person, phone, email, address, address_description, location_name, business_type, payment_terms, credit_limit, is_active, notes) VALUES&#10;('BUS001', 'Köşe Restoran', 'Mehmet Bey', '+902161234567', 'info@koserestoran.com', 'Kadıköy Mah. Moda Cad. No:15 Kadıköy/İstanbul', 'Moda Sahili yanında, yeşil tabelalı bina, arka kapıdan giriş', 'Kadıköy Moda', 'Restaurant', 'POSTPAID', 5000.00, true, 'Hızlı teslimat gerektiren restoran'),&#10;&#10;('BUS002', 'Pizza Palace Suadiye', 'Ayşe Hanım', '+902162345678', 'order@pizzapalace.com', 'Bağdat Cad. No:250 Suadiye/İstanbul', 'AVM karşısı, büyük pizza tabelası, araç park yeri var', 'Suadiye', 'Fast Food', 'PREPAID', 0.00, true, 'Günlük yoğun sipariş hacmi'),&#10;&#10;('BUS003', 'Market Plus Ataşehir', 'Hasan Usta', '+902163456789', 'info@marketplus.com', 'Ataşehir Bulvarı No:100 Ataşehir/İstanbul', 'Metro çıkışı, 24 saat açık market, yükleme alanı mevcut', 'Ataşehir Merkez', 'Market', 'POSTPAID', 10000.00, true, '24 saat sipariş alıyor'),&#10;&#10;('BUS004', 'Çiçek Dünyası Nişantaşı', 'Zeynep Hanım', '+902164567890', 'siparis@cicekdunyasi.com', 'Nişantaşı Cad. No:45 Şişli/İstanbul', 'Eski çiçekçiler çarşısı içinde, kırmızı tabela', 'Nişantaşı', 'Flower Shop', 'CASH_ON_DELIVERY', 2000.00, true, 'Özel günlerde yoğunluk artar'),&#10;&#10;('BUS005', 'Eczane Sağlık Beyoğlu', 'Doktor Ahmet', '+902165678901', 'info@eczanesaglik.com', 'İstiklal Cad. No:123 Beyoğlu/İstanbul', 'Galatasaray Lisesi yanı, yeşil haç tabelası, 7/24 açık', 'Beyoğlu İstiklal', 'Pharmacy', 'POSTPAID', 3000.00, true, 'Acil ilaç siparişleri alır');&#10;&#10;-- Örnek siparişler&#10;INSERT INTO orders (order_number, status, priority, business_id, business_contact_person, business_phone, courier_id, coordinator_id, end_customer_name, end_customer_phone, pickup_address, pickup_address_description, pickup_contact_person, delivery_address, delivery_address_description, package_description, package_weight, package_count, payment_type, delivery_fee, collection_amount, courier_notes, business_notes, scheduled_pickup_time, estimated_delivery_time, order_date) VALUES&#10;&#10;('ORD-2025080401', 'PENDING', 'NORMAL', 1, 'Mehmet Bey', '+902161234567', NULL, 1, 'Elif Yılmaz', '+905556666666', 'Kadıköy Mah. Moda Cad. No:15 Kadıköy/İstanbul', 'Moda Sahili yanında, yeşil tabelalı bina, arka kapıdan giriş', 'Mehmet Bey', 'Acıbadem Mah. Çeçen Sok. No:8 Kat:3 Üsküdar/İstanbul', 'Apartman zili çalışmıyor, telefon arayın, 3. kat daire 7', 'Pizza Margherita ve İçecek', 1.5, 1, 'CASH', 25.00, 45.50, 'Sıcak tutulmalı, ekstra soğuk içecek', 'Müşteri arayıp geldiğinde teslim et', '2025-08-04 19:30:00', '2025-08-04 20:15:00', '2025-08-04 19:00:00'),&#10;&#10;('ORD-2025080402', 'ASSIGNED', 'HIGH', 2, 'Ayşe Hanım', '+902162345678', 1, 1, 'Ahmet Kaya', '+905557777777', 'Bağdat Cad. No:250 Suadiye/İstanbul', 'AVM karşısı, büyük pizza tabelası, araç park yeri var', 'Ayşe Hanım', 'Levent Mah. Büyükdere Cad. No:200 Şişli/İstanbul', 'İş merkezinde, güvenlik kaydı gerekli, 15. kat Garanti Bankası', 'Büyük boy karışık pizza ve salata', 2.0, 1, 'BUSINESS_ACCOUNT', 35.00, 0.00, 'İş merkezine giriş için kimlik gerekli', 'Öğle molasında teslim edilmeli', '2025-08-04 20:00:00', '2025-08-04 21:00:00', '2025-08-04 19:45:00'),&#10;&#10;('ORD-2025080403', 'IN_TRANSIT', 'URGENT', 5, 'Doktor Ahmet', '+902165678901', 3, 2, 'Yaşlı Teyze', '+905558888888', 'İstiklal Cad. No:123 Beyoğlu/İstanbul', 'Galatasaray Lisesi yanı, yeşil haç tabelası, 7/24 açık', 'Doktor Ahmet', 'Fenerbahçe Mah. Bağdat Cad. No:300 Kat:1 Kadıköy/İstanbul', 'Kapıcı var, apartman no: 5, yaşlı teyze tek başına', 'Acil ilaç paketi - Kalp ilacı', 0.3, 1, 'CASH', 15.00, 125.00, 'Acil ilaç, hızlı teslimat gerekli, para tahsil edilecek', 'Kalp hastası için acil, gecikme olmasın', '2025-08-04 18:45:00', '2025-08-04 19:30:00', '2025-08-04 18:30:00');&#10;&#10;-- Sipariş takip kayıtları&#10;INSERT INTO order_tracking (order_id, status, description, created_by, created_by_type) VALUES&#10;(1, 'PENDING', 'Sipariş alındı, kurye ataması bekleniyor', 'SISTEM', 'SYSTEM'),&#10;(2, 'PENDING', 'Sipariş alındı', 'SISTEM', 'SYSTEM'),&#10;(2, 'ASSIGNED', 'Ali Özkan kuryesine atandı', 'Ahmet Yılmaz', 'COORDINATOR'),&#10;(3, 'PENDING', 'Acil sipariş alındı', 'SISTEM', 'SYSTEM'),&#10;(3, 'ASSIGNED', 'Osman Acar kuryesine atandı', 'Ayşe Demir', 'COORDINATOR'),&#10;(3, 'PICKED_UP', 'Paket eczaneden alındı', 'Osman Acar', 'COURIER'),&#10;(3, 'IN_TRANSIT', 'Teslimat adresine doğru yola çıkıldı', 'Osman Acar', 'COURIER');" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>